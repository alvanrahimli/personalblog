<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Alvan&#39;s Blog</title>
    <link>https://rahim.li/posts/</link>
    <description>Recent content in Posts on Alvan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Oct 2021 14:19:49 +0000</lastBuildDate><atom:link href="https://rahim.li/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OS-Dev Notes #1</title>
      <link>https://rahim.li/posts/os-dev-notes-1/</link>
      <pubDate>Fri, 01 Oct 2021 14:19:49 +0000</pubDate>
      
      <guid>https://rahim.li/posts/os-dev-notes-1/</guid>
      <description>OS-DEV notes #1 8086 Segment Registers: To access memory adresses more than 16 bit (65535) we use &amp;lsquo;Segment Registers&amp;rsquo;
It is always appreciated to remove interrupts (cli), reset segment registers, then set interrupts (sli) before bootloader starts.
 CS =&amp;gt; Code Segment SS =&amp;gt; Stack Segment DS =&amp;gt; Data Segment ES =&amp;gt; Extra Segment  Final memory address is calculated as:
final address = Segment Register * 16 + offset</description>
      <content>&lt;h1 id=&#34;os-dev-notes-1&#34;&gt;OS-DEV notes #1&lt;/h1&gt;
&lt;h2 id=&#34;8086-segment-registers&#34;&gt;8086 Segment Registers:&lt;/h2&gt;
&lt;p&gt;To access memory adresses more than 16 bit (65535) we use &amp;lsquo;Segment Registers&amp;rsquo;&lt;br&gt;
It is always appreciated to remove interrupts (&lt;code&gt;cli&lt;/code&gt;), reset segment registers, then set interrupts (&lt;code&gt;sli&lt;/code&gt;) before bootloader starts.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CS =&amp;gt; Code Segment&lt;/li&gt;
&lt;li&gt;SS =&amp;gt; Stack Segment&lt;/li&gt;
&lt;li&gt;DS =&amp;gt; Data Segment&lt;/li&gt;
&lt;li&gt;ES =&amp;gt; Extra Segment&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Final memory address is calculated as:&lt;br&gt;
&lt;code&gt;final address = Segment Register * 16 + offset&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In the example below, &lt;code&gt;lodsb&lt;/code&gt; knows that, address it must read is &lt;code&gt;0x7c * 16 + 0x1f&lt;/code&gt;, as &lt;code&gt;lodsb&lt;/code&gt; uses Data Segment&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;org 0
mov ax, 0x7c
mov ds, ax
mov si, 0x1f
lodsb           ; LODSB uses Data Segment for segmentation
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The table below demonstrates LOD__ command usage:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Mnemonic&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AC&lt;/td&gt;
&lt;td&gt;LODS m8&lt;/td&gt;
&lt;td&gt;Load byte at address DS:(E)SI into AL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AD&lt;/td&gt;
&lt;td&gt;LODS m16&lt;/td&gt;
&lt;td&gt;Load word at address DS:(E)SI into AX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AD&lt;/td&gt;
&lt;td&gt;LODS m32&lt;/td&gt;
&lt;td&gt;Load double-word at address DS:(E)SI into EAX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AC&lt;/td&gt;
&lt;td&gt;LODSB&lt;/td&gt;
&lt;td&gt;Load byte at address DS:(E)SI into AL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AD&lt;/td&gt;
&lt;td&gt;LODSW&lt;/td&gt;
&lt;td&gt;Load word at address DS:(E)SI into AX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AD&lt;/td&gt;
&lt;td&gt;LODSD&lt;/td&gt;
&lt;td&gt;Load double-word at address DS:(E)SI into EAX&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Stack Segmentation example:&lt;br&gt;
At the code below, when we &lt;strong&gt;push 0xffff&lt;/strong&gt; to stack, stack pointer is
decremented by 2 (bc, we use 16 bit) and &lt;code&gt;sp == 0x7bfe&lt;/code&gt;.&lt;br&gt;
Then, memory at adress &lt;strong&gt;0x7bfe&lt;/strong&gt; is set to &lt;strong&gt;0xffff&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mov ax, 0x00    ; Set ax to 0x00
mov ss, ax      ; Move value in ax to &#39;stack segment&#39;
mov ax, 0x7c00  ; Add ax to 0x7c00
mov sp, ax      ; Move AX to &#39;stack pointer&#39;

push 0xffff     ; Pushes 0xffff to the stack
&lt;/code&gt;&lt;/pre&gt;</content>
    </item>
    
    <item>
      <title>Learing Vim - Day #1</title>
      <link>https://rahim.li/posts/learing-vim-day-1/</link>
      <pubDate>Sat, 04 Sep 2021 21:41:22 +0400</pubDate>
      
      <guid>https://rahim.li/posts/learing-vim-day-1/</guid>
      <description>The great question - WHY? Well, to be honest I dont know exact answer, but I&amp;rsquo;ve some stories I tell myself. First, this is because of the will of efficient use of keyboard. You know, I paid full price for all keys on it. Why shouldn&amp;rsquo;t use them?
The second reason is, wrist healty. As I&amp;rsquo;m planning coding as the main part of my life, of course, it shouldn&amp;rsquo;t hurt me.</description>
      <content>&lt;h1 id=&#34;the-great-question---why&#34;&gt;The great question - WHY?&lt;/h1&gt;
&lt;p&gt;Well, to be honest I dont know exact answer, but I&amp;rsquo;ve some stories I tell myself.
First, this is because of the will of efficient use of keyboard. You know, I paid full price for all keys on it. Why shouldn&amp;rsquo;t use them?&lt;br&gt;
The second reason is, wrist healty. As I&amp;rsquo;m planning coding as the main part of my life, of course, it shouldn&amp;rsquo;t hurt me.&lt;br&gt;
At last, the true reason, of course, is +70% coolness. Not using mouse while coding, such a badass behaviour.&lt;/p&gt;
&lt;h1 id=&#34;first-steps&#34;&gt;First steps&lt;/h1&gt;
&lt;p&gt;I began with installing Vim on my linux machine. Which is Manjaro (previously it was Fedora). Although Vi was already installed, I don&amp;rsquo;t know difference, so I installed Vim, which stands for Vi IMproved.&lt;br&gt;
2 or 3 days passed, I didn&amp;rsquo;t have enough courage and time to begin. Then I realised, I can do what is &lt;em&gt;not&lt;/em&gt; called The Soft-Transition. So, I installed Vim extension for Visual Studio Code. While installing I came accross with Tutor extension, with great UI and explanation. Such a niice extension it is. I went through first 5 tutorials. (It adds new tab to activity bar. You can continue learning any time, very easily)&lt;br&gt;
Currently, I know enough shortcuts and theory to use Vim for daily use, but it is not as fluent as traditional writing of mine, as I&amp;rsquo;m quite used to using these home, end, fn and etc. Not just these! I can&amp;rsquo;t even Ctrl+C / Ctrl+V now! Can you beileve it?? - Of course you do. I said I&amp;rsquo;m learning Vim. Ok, ok, enough cringe, let&amp;rsquo;s go back to topic.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Btw, these double spaces in markdown syntax for adding new line, I hate them!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;getting-used-to-madness&#34;&gt;Getting used to madness&lt;/h1&gt;
&lt;p&gt;As I was going through those tutorials, I got used to hjkl navigation (I was going through caret labirints, lol!), Then came deleting. U know (or don&amp;rsquo;t know) d at Normal mode. Oh, snap! (not snapcraft.io, I like how easy it is distributing packages with snapd :D)  I didn&amp;rsquo;t tell you about modes. It is not difficult, There are 3 famous modes. &lt;strong&gt;Normal, Insert and Visual&lt;/strong&gt;. Basically, in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Normal mode&lt;/strong&gt;: you navigate and manipulate text&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Insert mode&lt;/strong&gt;: you of course, insert text&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Visual mode&lt;/strong&gt;: you select text (or maybe as I know)
Okay, it was a bit off-the-rails (are there any phrase like this? let me know :D). Actually, there was some other shortcuts, such as gg, G, H, M, L which I did learn. (they help with navigating file, go to page top, file end and etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;pain-or-is-it&#34;&gt;Pain (or is it?)&lt;/h1&gt;
&lt;p&gt;To understand my pain you don&amp;rsquo;t need to do any extra things. Just know that I started learning Vim. All my instinct-like abilities (copying, pasting, selecting) must be changed. Damn, this is difficult enough to make man insult vim users and quit. But noo, I was linux enthusiast for about 3 years now. If there is one thing I have learnt by far, it is not giving up for every problem I face. My great friend Yalchin reminded this to me yesterday. By the way, he also has &lt;a href=&#34;https://yalchin.info/blog&#34;&gt;great blog&lt;/a&gt;, you can use like handbook. Thanks to him.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;To be continued&amp;hellip;&lt;/em&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Non-Functional Requirements</title>
      <link>https://rahim.li/posts/non-functional-requirements/</link>
      <pubDate>Fri, 03 Sep 2021 14:19:49 +0000</pubDate>
      
      <guid>https://rahim.li/posts/non-functional-requirements/</guid>
      <description>Non-functional requirements are, but not limited to:
 Performance Load Data volume Concurrent users SLA &amp;amp; etc.  Performance System must be fast. But fast is relative term. If there is an end user fast means requests taking less than 1 sec. On the other side if we are working B2B, fast can mean less than 100ms.
Latency How much time does it take to perform a single task?
Throughput How many tasks can be performed in a given time unit?</description>
      <content>&lt;p&gt;Non-functional requirements are, but not limited to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Performance&lt;/li&gt;
&lt;li&gt;Load&lt;/li&gt;
&lt;li&gt;Data volume&lt;/li&gt;
&lt;li&gt;Concurrent users&lt;/li&gt;
&lt;li&gt;SLA &amp;amp; etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;performance&#34;&gt;Performance&lt;/h2&gt;
&lt;p&gt;System must be fast. But fast is relative term. If there is an end user fast means requests taking less than 1 sec. On the other side if we are working B2B, fast can mean less than 100ms.&lt;/p&gt;
&lt;h3 id=&#34;latency&#34;&gt;Latency&lt;/h3&gt;
&lt;p&gt;How much time does it take to perform a single task?&lt;/p&gt;
&lt;h3 id=&#34;throughput&#34;&gt;Throughput&lt;/h3&gt;
&lt;p&gt;How many tasks can be performed in a given time unit?&lt;/p&gt;
&lt;h3 id=&#34;latency-vs-throughput&#34;&gt;Latency VS Throughput&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Duration&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Latency&lt;/td&gt;
&lt;td&gt;1second&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Throughput&lt;/td&gt;
&lt;td&gt;- Well designed app: &amp;gt; 1000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;- Badly designed app: &amp;lt; 60&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;load&#34;&gt;Load&lt;/h2&gt;
&lt;p&gt;Quantity of work we can perform without crushing. (It depends on application type)
E.g: WebAPI -&amp;gt; Number of concurrent requests we can handle without crashing.&lt;/p&gt;
&lt;h3 id=&#34;load-vs-throughput&#34;&gt;Load VS Throughput&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Throughput&lt;/td&gt;
&lt;td&gt;100 requests/sec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Load&lt;/td&gt;
&lt;td&gt;500 requests without crashing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;For e-commerce app it can be ~200 concurrent request, but system must be available on Black Fridays. So, we must be ready for ~2000 concurrent requests.&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;data-volume&#34;&gt;Data Volume&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How much data the system will accumulate over time&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Helps with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Deciding on Database type&lt;/li&gt;
&lt;li&gt;Designing queries&lt;/li&gt;
&lt;li&gt;Storage planning&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Two aspects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data required on &amp;ldquo;Day One&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Data growth over time&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;concurrent-users&#34;&gt;Concurrent users&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;How many users will use system simultaniously&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;concurrent-users-vs-load&#34;&gt;Concurrent users VS Load&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Concurrent Users&lt;/td&gt;
&lt;td&gt;Including &amp;ldquo;Dead times&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Load&lt;/td&gt;
&lt;td&gt;Actual requests&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For example, user requests for all products in category. Service handles request. After this for 5 minute user will be looking at this data. This duration is counted as &lt;strong&gt;&amp;ldquo;Dead Time&amp;rdquo;&lt;/strong&gt; and appropriate user is included in &lt;strong&gt;concurrent users&lt;/strong&gt;.&lt;br&gt;
For average system, &lt;code&gt;Concurrent = Load x 10&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;sla-service-level-agreement&#34;&gt;SLA (Service Level Agreement)&lt;/h2&gt;
&lt;p&gt;Required uptime for the system&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Cloud providers are mostly competing in this field. For example, SLA for Azure Cosmos DB is notes as 99.99% This means less than an hour per year:&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;24 * 365 = 8760 hrs/year
8760 * 99.99% = 8759.12
________________________
8760 - 8759.12 = 0.88 hrs/year
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Define what the system will have to deal with
&lt;ul&gt;
&lt;li&gt;Performance, SLA, Load and etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Client won&amp;rsquo;t be able to define them&lt;/li&gt;
&lt;li&gt;Never begin working without Non-Functional requirements defined&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>First Post</title>
      <link>https://rahim.li/posts/first-post/</link>
      <pubDate>Wed, 01 Sep 2021 15:08:04 +0000</pubDate>
      
      <guid>https://rahim.li/posts/first-post/</guid>
      <description>Hi! This is a blog I&amp;rsquo;m trying to set up :)
import &amp;#34;fmt&amp;#34; func main() { fmt.Println(&amp;#34;Hello, Hugo!&amp;#34;) } </description>
      <content>&lt;h1 id=&#34;hi&#34;&gt;Hi!&lt;/h1&gt;
&lt;p&gt;This is a blog I&amp;rsquo;m trying to set up :)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, Hugo!&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://rahim.li/posts/about-me/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rahim.li/posts/about-me/</guid>
      <description>Who am I?  I&amp;rsquo;m a geek. My name is Alvan Rahimli. Here is my GitHub. I do lots of procastination, as well as some coding.
Actually, it is a lot of coding, but I feel I can still fit much more activities in a day, but you know, there are too much distractions. So anyway, I&amp;rsquo;m a software developer, with about 2 years experience. I do a lot of C# &amp;amp; .</description>
      <content>&lt;h1 id=&#34;who-am-i&#34;&gt;Who am I?&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;I&amp;rsquo;m a geek. My name is Alvan Rahimli. Here is my &lt;a href=&#34;https://github.com/alvanrahimli&#34;&gt;GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I do lots of procastination, as well as some coding.&lt;br&gt;
Actually, it is a lot of coding, but I feel I can still fit much more activities in a day, but you know, there are too much distractions.&lt;/li&gt;
&lt;li&gt;So anyway, I&amp;rsquo;m a software developer, with about 2 years experience.&lt;/li&gt;
&lt;li&gt;I do a lot of &lt;strong&gt;C# &amp;amp; .NET Core&lt;/strong&gt; stuff, as well as some &lt;strong&gt;Golang&lt;/strong&gt; coding. I enjoy writing websites, but not only them (as I plan shifting my career to more low level stuff :D).&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;what-am-i-doing&#34;&gt;What am I doing?&lt;/h1&gt;
&lt;p&gt;I&amp;rsquo;m currently working as a Middle Software Developer at &lt;a href=&#34;https://staffwerke.de&#34;&gt;Staffwerke&lt;/a&gt;. Before this, I was gaining experience at number of places, that I have listed below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Staffwerke&lt;/strong&gt;  &lt;em&gt;(10/2021 - now)&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;Developing back-end services for various E-Commerce applications &amp;amp; Loyalty systems&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Frazex&lt;/strong&gt;     &lt;em&gt;(06/2021 - 09/2021)&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;Supporting legacy codebase for company’s projects&lt;/li&gt;
&lt;li&gt;Applying microservices architecture for scalable &amp;amp; available application&lt;/li&gt;
&lt;li&gt;Modelling systems for E-Commerce applications&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fonibo&lt;/strong&gt;     &lt;em&gt;(09/2020 - 05/2021)&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;Developing services for general operation flow of fast delivery platform&lt;/li&gt;
&lt;li&gt;Writing algorithms to optimize courier delivery paths&lt;/li&gt;
&lt;li&gt;Taking part in several internal projects such as posbox.app&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;KekaMaps&lt;/strong&gt;   &lt;em&gt;(09/2020 - 11/2020)&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;Designing and developing API infrastructure using ASP.NET Core WebApi&lt;/li&gt;
&lt;li&gt;Writing admin panel for operational team behind the website&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Edway&lt;/strong&gt;    &lt;em&gt;(06/2020 - 11/2020)&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;Managing &amp;amp; Operating IT Team&lt;/li&gt;
&lt;li&gt;Building scalable architecture using various technologies and services&lt;/li&gt;
&lt;li&gt;Writing services to help tutors and students to manage education paths&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;what-can-i-do&#34;&gt;What can I do?&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Languages&lt;/th&gt;
&lt;th&gt;Tools &amp;amp; Frameworks&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;C#&lt;/td&gt;
&lt;td&gt;.NET Core, ASP.NET Core MVC, WebAPI, Razor Pages, Blazor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dart&lt;/td&gt;
&lt;td&gt;Flutter (I&amp;rsquo;m still learning tho)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TypeScript&lt;/td&gt;
&lt;td&gt;Angular&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Golang&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DevOps&lt;/td&gt;
&lt;td&gt;Docker &amp;amp; Docker Compose&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;some-of-my-projects&#34;&gt;Some of my projects&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&amp;hellip;Dots&lt;/strong&gt; – Package Manager for dotFiles
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alvanrahimli/dots-cli&#34;&gt;(go to project)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;kekamaps.com&lt;/strong&gt; – Website for disabled people to report any non-adopted places
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kekamaps.com&#34;&gt;(go to project)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OpenPOS&lt;/strong&gt; – Open Source Point of Sale &amp;amp; Inventory management application
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alvanrahimli/OpenPOS&#34;&gt;(go to project)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Several proprietary software such as fonibo.com, &lt;a href=&#34;https://posbox.app&#34;&gt;posbox.app&lt;/a&gt; and etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;boring-stuff&#34;&gt;Boring stuff&lt;/h1&gt;
&lt;p&gt;I am also good at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Team communication&lt;/li&gt;
&lt;li&gt;Project planning&lt;/li&gt;
&lt;li&gt;Software architecture design&lt;/li&gt;
&lt;li&gt;Time management&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;interesting-facts&#34;&gt;Interesting facts&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;I use &lt;a href=&#34;https://getfedora.org/&#34;&gt;Fedora&lt;/a&gt; btw.&lt;/li&gt;
&lt;li&gt;I &amp;lt;3 memes.&lt;/li&gt;
&lt;li&gt;Sometimes I write some blog posts.&lt;/li&gt;
&lt;li&gt;I have an amazing &lt;a href=&#34;https://github.com/themisir&#34;&gt;friend&lt;/a&gt; who is also a geek and writes awesome blogs at &lt;a href=&#34;https://themisir.com&#34;&gt;themisir.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
  </channel>
</rss>
